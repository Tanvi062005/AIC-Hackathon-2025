"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.certificateExpiryInDays = exports.caExpiryInDays = exports.removeAll = exports.removeDomain = exports.location = exports.configuredDomains = exports.hasCertificateFor = exports.certificateFor = void 0;
const tslib_1 = require("tslib");
const command_exists_1 = require("command-exists");
const debug_1 = tslib_1.__importDefault(require("debug"));
const fs_1 = require("fs");
const is_valid_domain_1 = tslib_1.__importDefault(require("is-valid-domain"));
const rimraf_1 = tslib_1.__importDefault(require("rimraf"));
const certificate_authority_1 = tslib_1.__importStar(require("./certificate-authority"));
const certificates_1 = require("./certificates");
const constants_1 = require("./constants");
const platforms_1 = tslib_1.__importDefault(require("./platforms"));
const user_interface_1 = tslib_1.__importDefault(require("./user-interface"));
const utils_1 = require("./utils");
const debug = debug_1.default("devcert");
/**
 * Request an SSL certificate for the given app name signed by the devcert root
 * certificate authority. If devcert has previously generated a certificate for
 * that app name on this machine, it will reuse that certificate.
 *
 * If this is the first time devcert is being run on this machine, it will
 * generate and attempt to install a root certificate authority.
 *
 * Returns a promise that resolves with { key, cert }, where `key` and `cert`
 * are Buffers with the contents of the certificate private key and certificate
 * file, respectively
 *
 * If `options.getCaBuffer` is true, return value will include the ca certificate data
 * as { ca: Buffer }
 *
 * If `options.getCaPath` is true, return value will include the ca certificate path
 * as { caPath: string }
 */
function certificateFor(requestedDomains, options = {}) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const domains = Array.isArray(requestedDomains) ? requestedDomains : [requestedDomains];
        domains.forEach((domain) => {
            if (domain !== "localhost" &&
                !is_valid_domain_1.default(domain, { subdomain: true, wildcard: false, allowUnicode: true, topLevel: false })) {
                throw new Error(`"${domain}" is not a valid domain name.`);
            }
        });
        const domainPath = constants_1.getStableDomainPath(domains);
        debug(`Certificate requested for ${domains}. Skipping certutil install: ${Boolean(options.skipCertutilInstall)}. Skipping hosts file: ${Boolean(options.skipHostsFile)}`);
        if (options.ui) {
            Object.assign(user_interface_1.default, options.ui);
        }
        if (!constants_1.isMac && !constants_1.isLinux && !constants_1.isWindows) {
            throw new Error(`Platform not supported: "${process.platform}"`);
        }
        if (!command_exists_1.sync("openssl")) {
            throw new Error("OpenSSL not found: OpenSSL is required to generate SSL certificates - make sure it is installed and available in your PATH");
        }
        let domainKeyPath = constants_1.pathForDomain(domainPath, `private-key.key`);
        let domainCertPath = constants_1.pathForDomain(domainPath, `certificate.crt`);
        if (!fs_1.existsSync(constants_1.rootCAKeyPath)) {
            debug("Root CA is not installed yet, so it must be our first run. Installing root CA ...");
            yield certificate_authority_1.default(options);
        }
        else if (options.getCaBuffer || options.getCaPath) {
            debug("Root CA is not readable, but it probably is because an earlier version of devcert locked it. Trying to fix...");
            yield certificate_authority_1.ensureCACertReadable(options);
        }
        if (!fs_1.existsSync(constants_1.pathForDomain(domainPath, `certificate.crt`))) {
            debug(`Can't find certificate file for ${domains}, so it must be the first request for ${domains}. Generating and caching ...`);
            yield certificates_1.generateDomainCertificate(domains);
        }
        if (!options.skipHostsFile) {
            domains.forEach((domain) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                yield platforms_1.default.addDomainToHostFileIfMissing(domain);
            }));
        }
        debug(`Returning domain certificate`);
        const ret = {
            key: fs_1.readFileSync(domainKeyPath),
            cert: fs_1.readFileSync(domainCertPath),
        };
        if (options.getCaBuffer)
            ret.ca = fs_1.readFileSync(constants_1.rootCACertPath);
        if (options.getCaPath)
            ret.caPath = constants_1.rootCACertPath;
        return ret;
    });
}
exports.certificateFor = certificateFor;
function hasCertificateFor(requestedDomains) {
    const domains = Array.isArray(requestedDomains) ? requestedDomains : [requestedDomains];
    const domainPath = constants_1.getStableDomainPath(domains);
    return fs_1.existsSync(constants_1.pathForDomain(domainPath, `certificate.crt`));
}
exports.hasCertificateFor = hasCertificateFor;
function configuredDomains() {
    return fs_1.readdirSync(constants_1.domainsDir);
}
exports.configuredDomains = configuredDomains;
function location() {
    return constants_1.configDir;
}
exports.location = location;
function removeDomain(requestedDomains) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const domains = Array.isArray(requestedDomains) ? requestedDomains : [requestedDomains];
        yield certificates_1.revokeDomainCertificate(domains);
        const domainPath = constants_1.getStableDomainPath(domains);
        return rimraf_1.default.sync(constants_1.pathForDomain(domainPath));
    });
}
exports.removeDomain = removeDomain;
function removeAll() {
    certificate_authority_1.uninstall();
}
exports.removeAll = removeAll;
function caExpiryInDays() {
    try {
        const caExpiryData = utils_1.openssl(['x509', '-in', constants_1.rootCACertPath, '-noout', '-enddate']).toString().trim();
        return utils_1.parseOpenSSLExpiryData(caExpiryData);
    }
    catch (_a) {
        return -1;
    }
}
exports.caExpiryInDays = caExpiryInDays;
function certificateExpiryInDays(domain) {
    const domainPath = constants_1.getStableDomainPath([domain]);
    let domainCertPath = constants_1.pathForDomain(domainPath, 'certificate.crt');
    try {
        const certExpiryData = utils_1.openssl(['x509', '-in', domainCertPath, '-noout', '-enddate']).toString().trim();
        return utils_1.parseOpenSSLExpiryData(certExpiryData);
    }
    catch (_a) {
        return -1;
    }
}
exports.certificateExpiryInDays = certificateExpiryInDays;
//# sourceMappingURL=data:application/json;base64,